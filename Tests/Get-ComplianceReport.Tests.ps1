. $PSScriptRoot\_InitializeTests.ps1

Describe 'Get-ComplianceReport' -Tag 'Report' {

	It 'Should return a ComplianceReport object when -PassThru parameter was given' {
		$report = Get-ComplianceReport 'Name Compliance' -Checks @($TestReportCheck1,$TestReportCheck2) -Silent -PassThru
		$report.GetType().Name | Should -BeLike 'IAComplianceReport'
	}
	Describe 'Host Output' {
		Mock Write-Host {} -ModuleName IACompliance

		It 'Should write the ToString() value of each object once before it checks its compliance for each rule in green' {
			Get-ComplianceReport 'Name Compliance' -Checks @($TestReportCheck1,$TestReportCheck2)
			Assert-MockCalled Write-Host -Times (($TestReportcheckInput | Where-Object{$_ -ne $null}).Count * 2) -ParameterFilter {$ForegroundColor -eq [ConsoleColor]'Green'} -Scope It -ModuleName IACompliance
		}
		It 'Should write rules with which an object is not compliant in darkred' {
			Get-ComplianceReport 'Name Compliance' -Checks @($TestReportCheck1,$TestReportCheck2)
			Assert-MockCalled Write-Host -Times 3 -ParameterFilter {$ForegroundColor -eq [ConsoleColor]'DarkRed'} -Scope It -ModuleName IACompliance
		}
		It 'Should write rules with with an object is compliant in darkgreen' {
			Get-ComplianceReport 'Name Compliance' -Checks @($TestReportCheck1,$TestReportCheck2)
			Assert-MockCalled Write-Host -Times 7 -ParameterFilter {$ForegroundColor -eq [ConsoleColor]'DarkGreen'} -Scope It -ModuleName IACompliance
		}
		It 'Should not write anything if -Silent parameter was given' {
			Get-ComplianceReport 'Name Compliance' -Checks @($TestReportCheck1,$TestReportCheck2) -Silent
			Assert-MockCalled Write-Host -Times 0 -Scope It -ModuleName IACompliance
		}
	}
	It 'Should check all objects generated by inputscript' {

	}
}


# Import-Module .\IACompliance -Verbose -Force
# $Rules = @(
# 	# Rules
# 	New-Rule 'Global Security Groups Should start with "G"' {
# 		$_.GroupCategory -like 'Security' -and $_.GroupScope -like 'Global'
# 	} {
# 		$requiredLetter = 'G'
# 		$_.Name.StartsWith($requiredLetter) -and $_.SamAccountName.StartsWith($requiredLetter)
# 	} -Verbose

# 	New-Rule 'Universal Security Groups Should start with "U"' {
# 		$_.GroupCategory -like 'Security' -and $_.GroupScope -like 'Universal'
# 	} {
# 		$requiredLetter = 'U'
# 		$_.Name.StartsWith($requiredLetter) -and $_.SamAccountName.StartsWith($requiredLetter)
# 	} -Verbose

# 	New-Rule 'DomainLocal Security Groups Should start with "L"' {
# 		$_.GroupCategory -like 'Security' -and $_.GroupScope -like 'DomainLocal'
# 	} {
# 		$requiredLetter = 'L'
# 		$_.Name.StartsWith($requiredLetter) -and $_.SamAccountName.StartsWith($requiredLetter)
# 	} -Verbose
# )

# . .\IACompliance\Private\_Classes.ps1
# [IAComplianceCheck]::New('test', {$test = '1'}, ($Rules | Select -first 1))
# [IAComplianceCheck]::New('test', {$test = '1'}, $Rules)
# [IAComplianceCheck]::New('AD Naming Conventions', {Get-ADGroup -Filter * -SearchBase "OU=UniversalRoles,OU=_Rolegroups,OU=_Groups,DC=be,DC=lidl,DC=net" -SearchScope Subtree}, $Rules)
# $sb = {Get-ADGroup -Filter * -SearchBase "OU=UniversalRoles,OU=_Rolegroups,OU=_Groups,DC=be,DC=lidl,DC=net" -SearchScope Subtree}
# New-Check 'AD Naming Conventions' -Input $sb -Rules $Rules -Verbose

# New-Check 'AD Naming Conventions' -Input {
# 	Get-ADGroup -Filter * -SearchBase "OU=UniversalRoles,OU=_Rolegroups,OU=_Groups,DC=be,DC=lidl,DC=net" -SearchScope Subtree
# } -Rules (New-Rule 'Global Security Groups Should start with "G"' {
# 		$_.GroupCategory -like 'Security' -and $_.GroupScope -like 'Global'
# 	} {
# 		$requiredLetter = 'G'
# 		$_.Name.StartsWith($requiredLetter) -and $_.SamAccountName.StartsWith($requiredLetter)
# 	}) -Verbose

# Import-Module .\IACompliance -Verbose -Force

# $testRule = New-Rule 'Global Security Groups Should start with "G"' {
# 	$Input.GroupCategory -eq 'Security' -and $Input.GroupScope -eq 'Global'
# } {
# 	$requiredLetter = 'G'
# 	$Input.Name.StartsWith($requiredLetter) -and $Input.SamAccountName.StartsWith($requiredLetter)
# } -Verbose